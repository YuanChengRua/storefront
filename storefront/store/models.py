from django.db import models

# Create your models here.
# new class promotion - product, promotion can have many product and product can have many promotion
class Promotion(models.Model):
    description = models.CharField(max_length=255)
    discount = models.FloatField()




class Collection(models.Model):
    title = models.CharField(max_length=255)
    featured_product = models.ForeignKey('Product', on_delete=models.SET_NULL, null=True, related_name='+')
    # because the product already has filed called collection, when featured_product create a reverse field in product, the name will still be collection,
    # so we need to change the name generated by featured_product, '+' tells django not to create a reverse relationship
    def __str__(self):
        return self.title

    class Meta:
        ordering = ['title']

class Product(models.Model):
    id = models.CharField(max_length=10, primary_key=True)  # primary key
    slug = models.SlugField()
    title = models.CharField(max_length=255)
    description = models.TextField()
    # max price 9999.99
    unit_price = models.DecimalField(max_digits=6, decimal_places=2)
    inventory = models.IntegerField()
    last_update = models.DateTimeField(auto_now=True)  # everytime we update the product, time will change
    collection = models.ForeignKey(Collection, on_delete=models.PROTECT)  # Collection is parent, product is child class
    promotions = models.ManyToManyField(Promotion)  # django will generate a reverse in the promition class named products

    def __str__(self):
        return self.title

    class Meta:
        ordering = ['title']

class Customer(models.Model):
    MEMBERSHIP_BRONZE = 'B'
    MEMBERSHIP_SILVER = 'S'
    MEMBERSHIP_GOLD = 'G'

    MEMBERSHIP_CHOICES = [
        (MEMBERSHIP_BRONZE, 'Bronze'),
        (MEMBERSHIP_SILVER, 'Silver'),
        (MEMBERSHIP_GOLD, 'Gold')
    ]
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    email = models.EmailField(unique=True)
    phone = models.CharField(max_length=255)
    birth_date = models.DateTimeField(auto_now_add=True)
    membership = models.CharField(max_length=1, choices=MEMBERSHIP_CHOICES, default=MEMBERSHIP_BRONZE)
    promotions = models.ManyToManyField(Promotion)  # django will generate a reverse in the promition class named products

    def __str__(self):
        return self.first_name

    class Meta:
        ordering = ['first_name']
class Order(models.Model):
    PAYMENT_STATUS_PENDING = 'P'
    PAYMENT_STATUS_COMPLETE = 'C'
    PAYMENT_STATUS_FAILED = 'F'

    PAYMENT_STATUS_CHOICES = [
        (PAYMENT_STATUS_PENDING, 'Pending'),
        (PAYMENT_STATUS_COMPLETE, 'Complete'),
        (PAYMENT_STATUS_FAILED, 'Failed')
    ]

    placed_at = models.DateTimeField(auto_now_add=True)
    payment_status = models.CharField(max_length=1, choices=PAYMENT_STATUS_CHOICES, default=PAYMENT_STATUS_PENDING)
    customer = models.ForeignKey(Customer, on_delete=models.PROTECT)  # when customer deleted, the order will not be deleted

class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.PROTECT)
    product = models.ForeignKey(Product, on_delete=models.PROTECT)
    quantity = models.PositiveIntegerField()
    unit_price = models.DecimalField(max_digits=6, decimal_places=2)

class Address(models.Model):
    street = models.CharField(max_length=255)
    city = models.CharField(max_length=255)
    # note customer is the parent class, because each customer has an address
    #customer = models.OneToOneField(Customer, on_delete=models.CASCADE, primary_key=True) # when customer deleted, associated Address will be deleted
    # when on_deleted set to SET_NULL, when customer deleted, address will be null
    # every customer will have a unique id because each customer could have several addresses, so only one address relate to one customer
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)  # one to many relationship

class Cart(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)

class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()
